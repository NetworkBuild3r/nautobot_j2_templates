{#- interfaces.j2: Main template for rendering Cisco interface configurations -#}
{#- Uses modular includes and robust data handling for Nautobot Golden Config -#}

{#- Whitespace control for cleaner output -#}
{%- set ns = namespace() -%} {# Namespace for reusable variables -#}

{#- Define common variables with safe defaults -#}
{%- set port_channel_regex = '(?i)^(Port-channel|Po)\s*\d+' %} {# Flexible regex for PortChannels -#}
{%- set interfaces_all = data.device.interfaces if (data is defined and data.device is defined and data.device.interfaces is defined) else [] %}
{%- set port_channels = interfaces_all | selectattr('name', 'match', port_channel_regex) | sort(attribute='name') %}
{%- set physical_svi_interfaces = interfaces_all | rejectattr('name', 'match', port_channel_regex) | sort(attribute='name') %}

{#- Safely retrieve uplink description from config_context -#}
{%- set default_uplink_description_device = data.device.config_context.get('site_pedc', {}).get('uplink_switch', 'PEDC-A-DIST-SW01') if (data is defined and data.device is defined and data.device.config_context is defined) else 'PEDC-A-DIST-SW01' %}
{%- set ns.default_uplink_description = 'UPLINK to ' ~ default_uplink_description_device %}

{#- Default VLANs for consistency -#}
{%- set ns.default_native_vlan = 1000 %}
{%- set ns.default_allowed_vlans = '2,102,1000' %}

{#- Include storm control macro from a separate file for modularity -#}
{%- include 'common/cisco/storm_control.j2' -%}

{#- PORT-CHANNEL INTERFACES -#}
{%- if port_channels %}
{%- for pc in port_channels %}
interface {{ pc.name }}
 description {{ pc.description | default(ns.default_uplink_description) }}
 {%- if pc.mode in ['TAGGED', 'TAGGED_ALL'] %}
 switchport trunk native vlan {{ pc.untagged_vlan.vid | default(ns.default_native_vlan) }}
 {%- set allowed_vlans_pc = pc.tagged_vlans | map(attribute='vid') | sort %}
 switchport trunk allowed vlan {{ allowed_vlans_pc | join(',') if allowed_vlans_pc else ns.default_allowed_vlans }}
 switchport mode trunk
 switchport nonegotiate
 {%- endif %}
 {{ storm(pc._custom_field_data, is_trunk=true) | indent(2) }}
 {%- if pc._custom_field_data.get('dhcp_snooping_trust') %}
 ip dhcp snooping trust
 {%- endif %}
 {%- if not pc.enabled %}
 shutdown
 {%- endif %}
!
{%- endfor %}
{%- endif %}

{#- PHYSICAL & SVI INTERFACES -#}
{%- for intf in physical_svi_interfaces %}
interface {{ intf.name }}
 {#- Only add description if it exists and differs from default -#}
 {%- if intf.description and intf.description != ns.default_uplink_description %}
 description {{ intf.description }}
 {%- endif %}

 {#- IP Address Configuration -#}
 {%- if intf.ip_addresses and intf.ip_addresses[0] %}
 {%- set ip_network_obj = intf.ip_addresses[0].address %}
 ip address {{ ip_network_obj | ipaddr('address') }} {{ ip_network_obj | ipaddr('netmask') }}
 {%- endif %}

 {#- Layer-2 Mode Handling -#}
 {%- if intf.mode == 'ACCESS' %}
 switchport mode access
 {%- if intf.untagged_vlan %}
 switchport access vlan {{ intf.untagged_vlan.vid }}
 {%- endif %}
 {%- if intf._custom_field_data.get('voice_vlan') %}
 switchport voice vlan {{ intf._custom_field_data.get('voice_vlan') }}
 {%- endif %}
 {%- elif intf.mode in ['TAGGED', 'TAGGED_ALL'] %}
 switchport mode trunk
 switchport nonegotiate
 switchport trunk native vlan {{ intf.untagged_vlan.vid | default(ns.default_native_vlan) }}
 {%- set allowed_vlans_intf = intf.tagged_vlans | map(attribute='vid') | sort %}
 switchport trunk allowed vlan {{ allowed_vlans_intf | join(',') if allowed_vlans_intf else ns.default_allowed_vlans }}
 {%- endif %}

 {#- LAG Membership -#}
 {%- if intf.lag and intf.lag.name %}
 {%- set channel_group_number = intf.lag.name | regex_replace('(?i)^(?:Port-channel|Po)\s*', '') | int %}
 channel-group {{ channel_group_number }} mode active
 {%- endif %}

 {#- Storm Control for L2 Interfaces -#}
 {%- if intf.mode in ['ACCESS', 'TAGGED', 'TAGGED_ALL'] %}
 {{ storm(intf._custom_field_data, is_trunk=(intf.mode in ['TAGGED', 'TAGGED_ALL'])) | indent(2) }}
 {%- endif %}

 {#- DHCP Snooping -#}
 {%- set dhcp_limit = intf._custom_field_data.get('dhcp_snooping_limit') %}
 {%- set dhcp_trust = intf._custom_field_data.get('dhcp_snooping_trust') %}
 {%- if intf.mode == 'ACCESS' and dhcp_limit %}
 ip dhcp snooping limit rate {{ dhcp_limit }}
 {%- elif intf.mode in ['TAGGED', 'TAGGED_ALL'] and dhcp_trust %}
 ip dhcp snooping trust
 {%- endif %}

 {%- if intf._custom_field_data.get('portfast') %}
 spanning-tree portfast
 {%- endif %}
 {%- if intf._custom_field_data.get('bpduguard') %}
 spanning-tree bpduguard enable
 {%- endif %}

 {%- if not intf.enabled %}
 shutdown
 {%- endif %}
!
{%- endfor %}