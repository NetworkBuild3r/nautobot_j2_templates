{%- macro render_storm_control(intf, is_uplink=False) %}
 {%- if intf._custom_field_data.get('storm_control_level') not in [null, ''] %}
  storm-control broadcast level {{ intf._custom_field_data.get('storm_control_level') }}.00
 {%- elif is_uplink %}
  storm-control broadcast level bps 20m
 {%- endif %}
 {%- if intf._custom_field_data.get('storm_control_action') not in [null, ''] %}
  {%- set action_val = intf._custom_field_data.get('storm_control_action') %}
  {%- if action_val is string %}
   {%- set action = action_val %}
  {%- elif action_val is iterable and action_val | length > 0 %}
   {%- set action = action_val[0] %}
  {%- else %}
   {%- set action = none %}
  {%- endif %}
  {%- if action and action != 'drop' %}
  storm-control action {{ action }}
  {%- endif %}
 {%- endif %}
{%- endmacro %}

{# Aggregate all interfaces, including module interfaces if present #}
{% set device_ifcs = host.interfaces | default([]) %}
{% set module_ifcs = host.all_modules | default([]) | map(attribute='interfaces') | sum(start=[]) %}
{% set all_ifcs = (device_ifcs + module_ifcs) | unique(attribute='name') | sort(attribute='name') | list %}
! Found {{ all_ifcs | length }} interfaces for device {{ host.hostname | default('unknown') }}

{# OSPF configuration data #}
{% set ospf_config = host.config_context.ospf | default({}) %}
{% set ospf_interfaces = ospf_config.interfaces | default([]) | map(attribute='name') | list %}

{% for intf in all_ifcs %}
interface {{ intf.name }}
 {%- if intf.description %}
 description {{ intf.description }}
 {%- elif intf._custom_field_data.get('upstream_switch_hostname') and intf._custom_field_data.get('upstream_port_id') %}
 description TO {{ intf._custom_field_data.get('upstream_switch_hostname') }} {{ intf._custom_field_data.get('upstream_port_id') }}
 {%- endif %}

 {# Determine interface mode: routed (IP, no VLANs), trunk (tagged VLANs or TAGGED/TAGGED_ALL), access (untagged VLAN or ACCESS), or none #}
 {%- set inferred_mode = 'routed' if intf.ip_addresses and not (intf.untagged_vlan or intf.tagged_vlans) else 'trunk' if (intf.tagged_vlans or intf.mode in ['TAGGED', 'TAGGED_ALL']) else 'access' if (intf.untagged_vlan or intf.mode == 'ACCESS') else none %}
 {%- set is_switchport = inferred_mode in ['access', 'trunk'] if inferred_mode is not none else false %}
 {%- set is_uplink = intf.name.lower().startswith('port-channel') or (intf.lag and intf.lag.name) %}

 {# IP address for routed interfaces #}
 {%- if inferred_mode == 'routed' %}
 no switchport
 ip address {{ intf.ip_addresses[0].address | replace('/', ' ') }}
 {%- endif %}

 {# Switchport configuration #}
 {%- if is_switchport %}
  {%- if inferred_mode == 'access' %}
 switchport mode access
   {%- if intf._custom_field_data.get('vlan_type') in ['data', 'video', 'security'] and intf._custom_field_data.get(intf._custom_field_data.vlan_type + '_vlan') %}
 switchport access vlan {{ intf._custom_field_data[intf._custom_field_data.vlan_type + '_vlan'] }}
   {%- elif intf.untagged_vlan and intf.untagged_vlan.vid %}
 switchport access vlan {{ intf.untagged_vlan.vid }}
   {%- endif %}
   {%- if intf._custom_field_data.get('cf_voice_vlan') %}
 switchport voice vlan {{ intf._custom_field_data.get('cf_voice_vlan') }}
   {%- elif intf._custom_field_data.get('voice_vlan') %}
 switchport voice vlan {{ intf._custom_field_data.get('voice_vlan') }}
   {%- endif %}
  {%- endif %}
  {%- if inferred_mode == 'trunk' %}
 switchport mode trunk
   {%- if intf._custom_field_data.get('upstream_switch_hostname') and intf._custom_field_data.get('upstream_port_id') %}
 switchport trunk native vlan 1000
   %- elif intf.untagged_vlan and intf.untagged_vlan.vid %}
 switchport trunk native vlan {{ intf.untagged_vlan.vid }}
   {%- endif %}
   {%- set vlan_list = [] %}
   {%- if intf._custom_field_data.get('data_vlan') %}{% set _ = vlan_list.append(intf._custom_field_data.get('data_vlan')) %}{% endif %}
   {%- if intf._custom_field_data.get('voice_vlan') %}{% set _ = vlan_list.append(intf._custom_field_data.get('voice_vlan')) %}{% endif %}
   {%- if intf._custom_field_data.get('video_vlan') %}{% set _ = vlan_list.append(intf._custom_field_data.get('video_vlan')) %}{% endif %}
   {%- if intf._custom_field_data.get('security_vlan') %}{% set _ = vlan_list.append(intf._custom_field_data.get('security_vlan')) %}{% endif %}
   {%- if vlan_list %}
 switchport trunk allowed vlan {{ vlan_list | sort | join(',') }}
   {%- elif intf.tagged_vlans and intf.tagged_vlans | length > 0 %}
 switchport trunk allowed vlan {{ intf.tagged_vlans | map(attribute='vid') | sort | join(',') }}
   {%- else %}
    ! warning: No tagged VLANs defined for {{ intf.name }}
   {%- endif %}
 switchport nonegotiate
  {%- endif %}
  {%- if intf._custom_field_data.get('storm_control_level') not in [null, ''] or is_uplink %}
 {{ render_storm_control(intf, is_uplink=is_uplink) | indent(1) }}
  {%- endif %}
  {%- if intf._custom_field_data.get('portfast') %}
 spanning-tree portfast
  {%- endif %}
  {%- if intf._custom_field_data.get('bpduguard') %}
 spanning-tree bpduguard enable
  {%- endif %}
  {%- if intf._custom_field_data.get('dhcp_snooping_limit') %}
 ip dhcp snooping limit rate {{ intf._custom_field_data.get('dhcp_snooping_limit') }}
  {%- endif %}
  {%- if intf._custom_field_data.get('dhcp_snooping_trust') %}
 ip dhcp snooping trust
  {%- endif %}
  {%- if is_uplink and intf.lag and intf.lag.name %}
 channel-group {{ intf.lag.name | replace('Port-channel', '') | lower }} mode active
  {%- endif %}
 {%- endif %}

 {# OSPF configuration for interfaces #}
 {%- if intf.name in ospf_interfaces %}
  {%- set ospf_intf = ospf_config.interfaces | selectattr('name', 'equalto', intf.name) | first %}
  {%- if intf.ip_addresses %}
 ip ospf {{ host.config_context.ospf_group.process_id | default(1) }} area {{ ospf_config.area | default('0.0.0.0') }}
   {%- if ospf_intf.apply_helper | default(false) and intf.name.lower() != 'vlan1000' %}
    {%- if host.config_context.ospf_group and host.config_context.ospf_group.helper_addresses %}
     {%- for helper in host.config_context.ospf_group.helper_addresses %}
 ip helper-address {{ helper }}
     {%- endfor %}
    {%- else %}
    ! warning: Missing helper_addresses in ospf_group for {{ intf.name }}
    {%- endif %}
   {%- endif %}
   {%- if ospf_intf.md5_key %}
 ip ospf message-digest-key {{ ospf_intf.md5_key }} md5 7 {{ host.config_context.ospf_group.md5_secret | default('ospf_digest') }}
   {%- else %}
    ! warning: Missing md5_key for interface {{ intf.name }}
   {%- endif %}
   {%- if ospf_intf.network_type %}
 ip ospf network {{ ospf_intf.network_type }}
   {%- else %}
 ip ospf network {{ 'point-to-point' if intf.name.lower().startswith('loopback') or intf.name.lower().startswith('port-channel') else 'broadcast' }}
    ! warning: Missing network_type for {{ intf.name }}, defaulting to {{ 'point-to-point' if intf.name.lower().startswith('loopback') or intf.name.lower().startswith('port-channel') else 'broadcast' }}
   {%- endif %}
  {%- else %}
   ! warning: Interface {{ intf.name }} in OSPF config but has no IP address
  {%- endif %}
 {%- endif %}

 {# Interface state #}
 {%- if intf.enabled | default(true) %}
 no shutdown
 {%- else %}
 shutdown
 {%- endif %}
!
{% endfor %}