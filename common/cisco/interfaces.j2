{#- Whitespace control for cleaner macro definition -#}
{%- macro storm(data, is_trunk=false) -%}
  {#-
    Macro to generate storm-control configuration.
    Args:
      data (dict): The custom field data for the interface.
      is_trunk (bool): True if the interface is a trunk, False for access.
  -#}
  {%- set cf_data = data if data is mapping else {} -%}
  {%- set level = cf_data.get('storm_control_level') -%}
  {%- set action_val = cf_data.get('storm_control_action') -%}

  {%- if is_trunk -%}
    {# Trunk storm control: always includes 'bps', defaults level to '20m' if not set/empty, and includes action. #}
  storm-control broadcast level bps {{ level if (level and level|string|trim != "") else '20m' }}
    {%- set act = action_val if action_val else ['shutdown'] -%} {# Default action if not specified #}
    {%- if act is string -%}
  storm-control action {{ act if act else 'shutdown' }}
    {%- elif act and act is iterable and act[0] -%} {# Check if act[0] is not empty/None #}
  storm-control action {{ act[0] if act[0] else 'shutdown' }}
    {%- else -%}
  storm-control action shutdown
    {%- endif -%}
  {%- else -%}
    {# Access storm control: only includes level if specified and not empty. No 'bps' by default, no action. #}
    {%- if level and level|string|trim != "" -%}
  storm-control broadcast level {{ level }}
    {%- endif -%}
  {%- endif -%}
{%- endmacro -%}

{# ---------- Define common variables and selections at the top ---------- #}
{% set port_channel_regex = '(?i)^(Port-channel|Po)\s*\d+' %} {# More flexible regex for PortChannels #}
{% set interfaces_all = data.device.interfaces %} {# Assuming 'data.device.interfaces' is the correct path from your context #}

{% set port_channels = interfaces_all | selectattr('name', 'match', port_channel_regex) | sort(attribute='name') %}
{% set physical_svi_interfaces = interfaces_all | rejectattr('name', 'match', port_channel_regex) | sort(attribute='name') %}

{# Default uplink description - retrieve safely from config context #}
{% set default_uplink_description_device = data.device.config_context.get('site_pedc', {}).get('uplink_switch', 'PEDC-A-DIST-SW01') %}
{% set default_uplink_description = 'UPLINK to ' ~ default_uplink_description_device %}

{# Default VLANs - can be defined globally or customized #}
{% set default_native_vlan = 1000 %}
{% set default_allowed_vlans = '2,102,1000' %}

{# ---------- PORT-CHANNEL INTERFACES ---------- #}
{% for pc in port_channels %}
interface {{ pc.name }}
  description {{ pc.description or default_uplink_description }}
  {% if pc.mode in ['TAGGED', 'TAGGED_ALL'] %}
  switchport trunk native vlan {{ pc.untagged_vlan.vid if pc.untagged_vlan else default_native_vlan }}
  {% set allowed_vlans_pc = pc.tagged_vlans | map(attribute='vid') | sort %}
  switchport trunk allowed vlan {{ allowed_vlans_pc | join(',') if allowed_vlans_pc else default_allowed_vlans }}
  switchport mode trunk
  switchport nonegotiate
  {% endif %}
  {{ storm(pc._custom_field_data, is_trunk=true) }} {# Pass is_trunk=true #}
  {% if pc._custom_field_data.get('dhcp_snooping_trust') %} {# Use ._custom_field_data and .get() #}
  ip dhcp snooping trust
  {% endif %}
  {% if not pc.enabled %}
  shutdown
  {% endif %}
!
{% endfor %}

{# ---------- PHYSICAL & SVI INTERFACES ---------- #}
{% for intf in physical_svi_interfaces %}
interface {{ intf.name }}
  {# Only add description if it exists and is not the default uplink description #}
  {% if intf.description and intf.description != default_uplink_description %}
  description {{ intf.description }}
  {% endif %}

  {# IP Address Configuration - assumes ip_addresses[0].address is an IPNetwork object or string like "ip/mask" #}
  {% if intf.ip_addresses and intf.ip_addresses[0] %}
  {% set ip_network_obj = intf.ip_addresses[0].address %}
  {# This assumes 'ipaddr' filter is available and works as expected for your Jinja2 environment #}
  {# Example: ipaddr("10.0.0.1/24", "address") -> "10.0.0.1", ipaddr("10.0.0.1/24", "netmask") -> "255.255.255.0" #}
  ip address {{ ip_network_obj | ipaddr('address') }} {{ ip_network_obj | ipaddr('netmask') }}
  {% endif %}

  {# ---- Layer-2 mode handling ---- #}
  {% if intf.mode == 'ACCESS' %}
  switchport mode access
  {% if intf.untagged_vlan %}
  switchport access vlan {{ intf.untagged_vlan.vid }}
  {% endif %}
  {% if intf._custom_field_data.get('cf_voice_vlan') %} {# Use ._custom_field_data #}
  switchport voice vlan {{ intf._custom_field_data.get('cf_voice_vlan') }}
  {% endif %}
  {% elif intf.mode in ['TAGGED', 'TAGGED_ALL'] %}
  switchport mode trunk
  switchport nonegotiate
  switchport trunk native vlan {{ intf.untagged_vlan.vid if intf.untagged_vlan else default_native_vlan }}
  {% set allowed_vlans_intf = intf.tagged_vlans | map(attribute='vid') | sort %}
  switchport trunk allowed vlan {{ allowed_vlans_intf | join(',') if allowed_vlans_intf else default_allowed_vlans }}
  {% endif %}

  {# ---- LAG membership ---- #}
  {% if intf.lag and intf.lag.name %}
  {# Robustly extract channel-group number, e.g., from "Port-channel1" or "Po12" #}
  {% set channel_group_number = intf.lag.name | regex_replace('(?i)^(?:Port-channel|Po)\s*', '') | int %}
  channel-group {{ channel_group_number }} mode active
  {% endif %}

  {# ---- Storm Control: Only for L2 physical interfaces ---- #}
  {% if intf.mode in ['ACCESS', 'TAGGED', 'TAGGED_ALL'] %}
  {{ storm(intf._custom_field_data, is_trunk=(intf.mode in ['TAGGED', 'TAGGED_ALL'])) }}
  {% endif %}

  {# ---- DHCP Snooping: Conditional based on mode ---- #}
  {% set dhcp_limit = intf._custom_field_data.get('dhcp_snooping_limit') %}
  {% set dhcp_trust = intf._custom_field_data.get('dhcp_snooping_trust') %}
  {% if intf.mode == 'ACCESS' and dhcp_limit %}
  ip dhcp snooping limit rate {{ dhcp_limit }}
  {% elif intf.mode in ['TAGGED', 'TAGGED_ALL'] and dhcp_trust %}
  ip dhcp snooping trust
  {% endif %}

  {% if intf._custom_field_data.get('portfast') %} {# Use ._custom_field_data #}
  spanning-tree portfast
  {% endif %}
  {% if intf._custom_field_data.get('bpduguard') %} {# Use ._custom_field_data #}
  spanning-tree bpduguard enable
  {% endif %}

  {% if not intf.enabled %}
  shutdown
  {% endif %}
!
{% endfor %}
