{%- macro render_storm_control(intf, is_uplink=False) %}
{% if intf._custom_field_data.get('storm_control_level') %}
 storm-control broadcast level {{ intf._custom_field_data.get('storm_control_level') }}.00
{% elif is_uplink %}
 storm-control broadcast level bps 20m
{% else %}
 storm-control broadcast level 40.00
{% endif %}
{%- if intf._custom_field_data.get('storm_control_action') %}
{%- set action_val = intf._custom_field_data.get('storm_control_action') %}
{%- if action_val is string %}
{%- set action = action_val %}
{%- elif action_val is iterable and action_val | length > 0 %}
{%- set action = action_val[0] %}
{%- else %}
{%- set action = none %}
{%- endif %}
{% if action and action != 'drop' %}
 storm-control action {{ action }}
{%- endif %}
{% else %}
 storm-control action shutdown
{%- endif %}
{%- endmacro %}

{# Aggregate interfaces #}
{% set device_ifcs = host.interfaces | default([]) %}
{% set module_ifcs = host.all_modules | default([]) | map(attribute='interfaces') | sum(start=[]) %}
{% set all_ifcs = (device_ifcs + module_ifcs) | unique(attribute='name') %}

! Debug: Found {{ all_ifcs | length }} interfaces

{% set ospf_interfaces = host.config_context.ospf.interfaces | default([]) | map(attribute='name') | list %}

{% for intf in all_ifcs | sort(attribute='name') %}
interface {{ intf.name }}
{% if intf._custom_field_data.get('upstream_switch_hostname') and intf._custom_field_data.get('upstream_port_id') %}
 description TO {{ intf._custom_field_data.get('upstream_switch_hostname') }} {{ intf._custom_field_data.get('upstream_port_id') }}
{% elif intf.description %}
 description {{ intf.description }}
{% endif %}
{% if intf.ip_addresses %}
 ip address {{ intf.ip_addresses[0].address | replace('/', ' ') }}
{% endif %}
{% if intf.mode == 'ACCESS' %}
 switchport mode access
{% set vlan_type = intf._custom_field_data.get('vlan_type') %}
{% if vlan_type in ['data', 'video', 'security'] and intf._custom_field_data.get(vlan_type + '_vlan') %}
 switchport access vlan {{ intf._custom_field_data.get(vlan_type + '_vlan') }}
{% elif intf.untagged_vlan and intf.untagged_vlan.vid %}
 switchport access vlan {{ intf.untagged_vlan.vid }}
{% endif %}
{% if intf._custom_field_data.get('cf_voice_vlan') %}
 switchport voice vlan {{ intf._custom_field_data.get('cf_voice_vlan') }}
{% endif %}
{{ render_storm_control(intf) }}
{% if intf._custom_field_data.get('portfast') %}
 spanning-tree portfast
{% endif %}
{% if intf._custom_field_data.get('bpduguard') %}
 spanning-tree bpduguard enable
{% endif %}
{% if intf._custom_field_data.get('dhcp_snooping_limit') %}
 ip dhcp snooping limit rate {{ intf._custom_field_data.get('dhcp_snooping_limit') }}
{% else %}
 ip dhcp snooping limit rate 30
{% endif %}
{% if intf._custom_field_data.get('dhcp_snooping_trust') %}
 ip dhcp snooping trust
{% endif %}
{% elif intf.mode in ['TAGGED', 'TAGGED_ALL'] or intf.name.startswith('Port-channel') %}
 switchport mode trunk
{% if intf._custom_field_data.get('upstream_switch_hostname') and intf._custom_field_data.get('upstream_port_id') %}
 switchport trunk native vlan 1000
{%- set vlan_list = [] %}
{%- if intf._custom_field_data.get('data_vlan') %}{% set _ = vlan_list.append(intf._custom_field_data.get('data_vlan')) %}{% endif %}
{%- if intf._custom_field_data.get('voice_vlan') %}{% set _ = vlan_list.append(intf._custom_field_data.get('voice_vlan')) %}{% endif %}
{%- if intf._custom_field_data.get('video_vlan') %}{% set _ = vlan_list.append(intf._custom_field_data.get('video_vlan')) %}{% endif %}
{%- if intf._custom_field_data.get('security_vlan') %}{% set _ = vlan_list.append(intf._custom_field_data.get('security_vlan')) %}{% endif %}
{%- if vlan_list %}
 switchport trunk allowed vlan {{ vlan_list | sort | join(',') }}
{%- endif %}
{% elif intf.untagged_vlan and intf.untagged_vlan.vid %}
 switchport trunk native vlan {{ intf.untagged_vlan.vid }}
{% if intf.tagged_vlans and intf.tagged_vlans | length > 0 %}
 switchport trunk allowed vlan {{ intf.tagged_vlans | map(attribute='vid') | sort | join(',') }}
{% endif %}
{% endif %}
 switchport nonegotiate
{{ render_storm_control(intf, is_uplink=(intf.name.startswith('Port-channel') or (intf.lag and intf.lag.name))) }}
{% if intf.lag and intf.lag.name %}
 channel-group {{ intf.lag.name | replace('Port-channel', '') }} mode active
{% endif %}
{% if intf._custom_field_data.get('dhcp_snooping_trust') %}
 ip dhcp snooping trust
{% endif %}
{% endif %}
{% if intf.name in ospf_interfaces %}
{% set ospf_intf = host.config_context.ospf.interfaces | selectattr('name', 'equalto', intf.name) | first %}
{% if intf.ip_addresses %}
{% if ospf_intf.apply_helper | default(false) and intf.name != 'Vlan1000' %}
 {% if host.config_context.ospf_group and host.config_context.ospf_group.helper_addresses %}
 {% for helper in host.config_context.ospf_group.helper_addresses %}
 ip helper-address {{ helper }}
 {% endfor %}
 {% else %}
 ! missing helper_addresses in ospf_group for {{ intf.name }}
 {% endif %}
{% endif %}
{% if ospf_intf.md5_key %}
 ip ospf message-digest-key {{ ospf_intf.md5_key }} md5 7 {{ host.config_context.ospf_group.md5_secret | default('ospf_digest') }}
{% else %}
 ! missing md5_key for interface {{ intf.name }}
{% endif %}
{% if ospf_intf.network_type is defined %}
 ip ospf network {{ ospf_intf.network_type }}
{% else %}
 ip ospf network {{ 'point-to-point' if intf.name.startswith('Port-channel') or intf.name.startswith('Loopback') else 'broadcast' }}
 ! missing network_type for {{ intf.name }}, defaulting to {{ 'point-to-point' if intf.name.startswith('Port-channel') or intf.name.startswith('Loopback') else 'broadcast' }}
{% endif %}
{% else %}
 ! interface {{ intf.name }} in OSPF config but has no IP address, skipping OSPF configuration
{% endif %}
{% endif %}
{% if intf.enabled %}
 no shutdown
{% else %}
 shutdown
{% endif %}
!
{% endfor %}